{
	// テンプレート
	"Template": {
		"prefix": "cpp",
		"body": [
			"#include <algorithm>",
			"#include <bitset>",
			"#include <cassert>",
			"#include <cctype>",
			"#include <cmath>",
			"#include <cstdio>",
			"#include <cstdint>",
			"#include <deque>",
			"#include <iostream>",
			"#include <map>",
			"#include <numeric>",
			"#include <queue>",
			"#include <set>",
			"#include <string>",
			"#include <stack>",
			"#include <tuple>",
			"#include <unordered_map>",
			"#include <unordered_set>",
			"#include <utility>",
			"#include <vector>",
			"#define rep(i, n) for (int i = 0; i < (int)(n); ++i)",
			"#define all(x) (x).begin(),(x).end()",
			"using namespace std;",
			"using ll = long long;",
			"using P = pair<long long, long long>;",
			"template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }",
			"template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }",
			"// #include <atcoder/all>",
			"// using namespace atcoder;",
			"// using mint = modint998244353;",
			"// using mint = modint1000000007;",
			"",
			"",
			"int main() {",
			"  cin.tie(nullptr);",
			"  ios::sync_with_stdio(false);",
			"",
			"  $0",
			"  return 0;",
			"}"
		],
		"description": "Template"
	},

	// 標準入出力
	"cin >> n": {
		"prefix": "cin",
		"body": [
			"cin >> "
		],
		"description": "cin >> "
	},

	"cout << n": {
		"prefix": "cout",
		"body": [
			"cout << $0 << \"\\n\";"
		],
		"description": "cout << "
	},

	"cout << Yes": {
		"prefix": "yes",
		"body": [
			"cout << \"Yes\" << \"\\n\";"
		],
		"description": "print yes"
	},

	"cout << No": {
		"prefix": "no",
		"body": [
			"cout << \"No\" << \"\\n\";"
		],
		"description": "print no"
	},

	"printf": {
		"prefix": "printf",
		"body": [
				"printf(\"%.10f\\n\", $0);",
		],
		"description": ""
	},

	// 構文省略
	"vs": {
		"prefix": "vs",
		"body": [
				"vector<string>",
		],
		"description": ""
	},

	"ret": {
		"prefix": "return",
		"body": [
				"return 0;",
		],
		"description": ""
	},

	"for()": {
		"prefix": "for",
		"body": [
				"for ($1; $2; $3) {",
				"  $0",
				"}",
		],
		"description": ""
	},

	"if": {
		"prefix": "if",
		"body": [
				"if ($1) {",
				"  $0",
				"}",
		],
		"description": ""
	},

	"else": {
		"prefix": "else",
		"body": [
				"else {",
				"  $0",
				"}",
		],
		"description": ""
	},

	"and": {
		"prefix": "and",
		"body": [
				"&& ",
		],
		"description": ""
	},

	"or": {
		"prefix": "or",
		"body": [
				"|| ",
		],
		"description": ""
	},

	"ll": {
		"prefix": "ll",
		"body": [
				"long long",
		],
		"description": ""
	},

	"vector": {
		"prefix": "vector",
		"body": [
				"vector<>",
		],
		"description": ""
	},

	"vector<int>": {
		"prefix": "vi",
		"body": [
				"vector<int>",
		],
		"description": "vector<int>"
	},

	"vectorvector<<int>>": {
		"prefix": "vvi",
		"body": [
				"vector<vector<int>>",
		],
		"description": "vector<vector<int>>"
	},

	"vll": {
		"prefix": "vll",
		"body": [
				"vector<ll>",
		],
		"description": ""
	},

	"vvll": {
		"prefix": "vvll",
		"body": [
				"vector<vector<ll>>",
		],
		"description": ""
	},

	"pii": {
		"prefix": "pii",
		"body": [
				"pair<int, int>",
		],
		"description": ""
	},

	"pll": {
		"prefix": "pll",
		"body": [
				"pair<ll, ll>",
		],
		"description": ""
	},

	"vpii": {
		"prefix": "vpii",
		"body": [
				"vector<pair<int, int>>",
		],
		"description": ""
	},

	"vpll": {
		"prefix": "vpll",
		"body": [
				"vector<pair<ll, ll>>",
		],
		"description": ""
	},

	"mp": {
		"prefix": "mp",
		"body": [
				"map<ll, ll> ",
		],
		"description": ""
	},

	"pq": {
		"prefix": "pq",
		"body": [
				"priority_queue<int, vector<int>, greater<int>>",
		],
		"description": ""
	},

	"nextp": {
		"prefix": "np",
		"body": [
				"do {",
				"  $0",
				"} while (next_permutation(all($1)));",
		],
		"description": ""
	},

	"lb": {
		"prefix": "lb",
		"body": [
				"lower_bound(all($1), $2)$0",
		],
		"description": ""
	},

	"sort": {
		"prefix": "sort",
		"body": [
				"sort(all($0));",
		],
		"description": ""
	},

	"pb": {
		"prefix": "pb",
		"body": [
				"push_back($0);",
		],
		"description": ""
	},

	"rsort": {
		"prefix": "rsort",
		"body": [
				"sort($1.rbegin(), $0.rend());",
		],
		"description": ""
	},

	"struct": {
		"prefix": "struct",
		"body": [
				"struct $1 {",
				"  $0",
				"};",
		],
		"description": ""
	},

	"class": {
		"prefix": "class",
		"body": [
				"class $1 {",
				"  private:",
				"    $0",
				"",
				"  public:",
				"    $2()",
				"        :  {}",
				"};",
		],
		"description": ""
	},

	// 省略
	"inf": {
		"prefix": "inf",
		"body": [
				"const int INF = 1e9;",
		],
		"description": ""
	},

	"mod": {
		"prefix": "mod",
		"body": [
				"const int MOD = 998244353;",
		],
		"description": ""
	},

	"pi": {
		"prefix": "pi",
		"body": [
				"const double PI = acos(-1);",
		],
		"description": ""
	},

	"graph": {
		"prefix": "graph",
		"body": [
				"using Graph = vector<vector<int>>;",
		],
		"description": ""
	},

	"rep": {
		"prefix": "rep",
		"body": [
				"rep($1, $2) $0",
		],
		"description": ""
	},

	"rev": {
		"prefix": "rev",
		"body": [
				"reverse(all($0));",
		],
		"description": ""
	},

	"dxdy": {
		"prefix": "dxdy",
		"body": [
			"const int dx[] = {1, 0, -1, 0};",
			"const int dy[] = {0, 1,  0, -1};"
		],
		"description": "dxdy"
	},

	"dfs": {
		"prefix": "dfs",
		"body": [
			"auto dfs = [&](auto dfs, ) -> void {",
			"  ",
			"};"
		],
		"description": "dfs"
	},

	// アルゴリズム
	"gcd": {
		"prefix": "gcd",
		"body": [
				"// a, bの最大公約数",
				"ll gcd(ll a, ll b) {",
				"  if (a < b) swap(a, b);",
				"  if (b == 0) return a;",
				"  else return gcd(b, a % b);",
				"}",
		],
		"description": ""
	},

	"lcm": {
		"prefix": "lcm",
		"body": [
				"// a, bの最大公約数",
				"ll gcd(ll a, ll b) {",
				"  if (a < b) swap(a, b);",
				"  if (b == 0) return a;",
				"  else return gcd(b, a % b);",
				"}",
				"",
				"// a, bの最小公倍数",
				"ll lcm(ll a, ll b) {",
				"  return a * b / gcd(a, b);",
				"}",
		],
		"description": ""
	},

	"isprime": {
		"prefix": "isprime",
		"body": [
				"bool IsPrime(long long n) {",
				"  if (n <= 1) return false;",
				"",
				"  for (long long i = 2; i * i <= n; ++i) {",
				"    if (n % i == 0) return false;",
				"  }",
				"",
				"  return true;",
				"}",
		],
		"description": ""
	},

	"factorprime": {
		"prefix": "factorprime",
		"body": [
				"// 素因数分解",
				"vector<pair<ll, ll>> FactorPrime(ll n) {",
				"  vector<pair<ll, ll>> prime;",
				"",
				"  for (ll i = 2; i * i <= n; ++i) {",
				"    if (n % i != 0) continue;",
				"",
				"    ll exponent = 0;",
				"    while (n % i == 0) {",
				"      ++exponent;",
				"      n /= i;",
				"    }",
				"",
				"    prime.push_back(make_pair(i, exponent));",
				"  }",
				"",
				"  // 上の処理後にnが1でないならnは素数",
				"  if (n != 1) {",
				"    prime.push_back(make_pair(n, 1));",
				"  }",
				"",
				"  return prime;",
				"}",
		],
		"description": ""
	},

	"comb": {
		"prefix": "comb",
		"body": [
				"ll comb(int n, int r) {",
				"  ll ans = 1;",
				"  for (int i = 0; i < r; i++) {",
				"    ans *= n - i;",
				"    ans /= i + 1;",
				"  }",
				"  return ans;",
				"}",
		],
		"description": ""
	},

	"sum": {
		"prefix": "sum",
		"body": [
				"// 累積和",
				"  // s[r] - s[l] = a[l, r)",
				"  vector<ll> sum($1);",
				"  for (int i = 0; i < $2; i++) {",
				"    sum[i + 1] = s[i] + a[i];",
				"  }$0",
		],
		"description": ""
	},

	"pow": {
		"prefix": "pow",
		"body": [
				"const int kMod = LLONG_MAX;",
				"long long Pow(long long x, long long n) {",
				"  long long res = 1;",
				"",
				"  while (n > 0) {",
				"    if (n & 1) (res *= x) %= kMod;",
				"    (x *= x) %= kMod;",
				"    n >>= 1;",
				"  }",
				"",
				"  return res;",
				"}",
		],
		"description": ""
	},

	"bit": {
		"prefix": "bit",
		"body": [
				"for (int bit = 0; bit < (1 << n); ++bit) {",
				"    for (int i = 0; i < n; ++i) {",
				"      if (bit & (1 << i)) {",
				"        ",
				"      }",
				"    }",
				"  }",
		],
		"description": ""
	},

	// データ構造
	"uf": {
		"prefix": "uf",
		"body": [
				"class UnionFind {",
				"  private:",
				"    vector<int> parent_;",
				"",
				"  public:",
				"    UnionFind(int n)",
				"        : parent_(n, -1) {}",
				"",
				"    int Find(int x) {",
				"      // 自身が親の場合",
				"      if (parent_[x] < 0) {",
				"        return x;",
				"      }",
				"",
				"      parent_[x] = Find(parent_[x]);",
				"      return parent_[x];",
				"    }",
				"",
				"    void Unite(int x, int y) {",
				"      x = Find(x);",
				"      y = Find(y);",
				"      if (x == y) {",
				"        return;",
				"      }",
				"",
				"      // 要素数が多い方をxに",
				"      if (parent_[x] > parent_[y]) {",
				"        swap(x, y);",
				"      }",
				"",
				"      // xを親に設定",
				"      parent_[x] += parent_[y];",
				"      parent_[y] = x;",
				"    }",
				"",
				"    bool Same(int x, int y) {",
				"      return Find(x) == Find(y);",
				"    }",
				"",
				"    int Size(int x) {",
				"      return -1 * parent_[Find(x)];",
				"    }",
				"};",
		],
		"description": ""
	},
}